<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>2018/03 on Sebastian Korotkiewicz - Tech{{log}}</title><link>https://sekor.eu.org/archive/2018/03/</link><description>Recent content in 2018/03 on Sebastian Korotkiewicz - Tech{{log}}</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://sekor.eu.org/archive/2018/03/index.xml" rel="self" type="application/rss+xml"/><item><title>Minio: How's bucket policy related to anonymous/authorized access?</title><link>https://sekor.eu.org/techlog/minio-hows-bucket-policy-related-to-anonymous/authorized-access/</link><pubDate>Fri, 30 Mar 2018 23:50:35 +0200</pubDate><guid>https://sekor.eu.org/techlog/minio-hows-bucket-policy-related-to-anonymous/authorized-access/</guid><description>thanks Cumbu from stackoverflow.com!
&amp;lsquo;public&amp;rsquo; is valid policy&amp;hellip;
You can change this policy: install mc (minio client) and then:
# list default hosts after install: mc config host ls # remove all hosts: mc config host rm {hostName} mc config host rm local # add your host: mc config host add {hostName} {url} {apiKey} {apiSecret} mc config host add local http://127.0.0.1:9000 ClientIdASSDSD ClientSecretASASASdsasdasdasdasd # create bucket: mc mb {host}/{bucket} mc mb local/mybucket # change bucket policy: mc policy {policy} {host}/{bucket} mc policy public local/mybucket</description></item><item><title>LEDE /OpenWRT on USB Stick</title><link>https://sekor.eu.org/techlog/lede-/openwrt-on-usb-stick/</link><pubDate>Sat, 24 Mar 2018 01:23:49 +0200</pubDate><guid>https://sekor.eu.org/techlog/lede-/openwrt-on-usb-stick/</guid><description>Prepare your USB Stick: mkfs.ext4 /dev/sda1
Install pacages on your router
opkg update; opkg install block-mount kmod-usb-core kmod-usb-ohci kmod-usb-storage kmod-usb2 kmod-scsi-core kmod-scsi-generic kmod-fs-ext4 libblkid Plug your USB Stick into your router
mount /dev/sda1 /mnt tar -C /overlay -cvf - . | tar -C /mnt -xf - umount /mnt Edit fstab
block detect &amp;gt; /etc/config/fstab vim /etc/config/fstab Config:
root@LEDE:~# cat /etc/config/fstab config 'global' option anon_swap '0' option anon_mount '0' option auto_swap '1' option auto_mount '1' option delay_root '5' option check_fs '0' config 'mount' option target '/overlay' option uuid '&amp;lt;uuid&amp;gt;' option enabled '1' option fstype 'ext4' Set the target to /overlay, and change the option enabled line from 0 to 1.</description></item><item><title>Creating Wildcard SSL Certificates with Let’s Encrypt</title><link>https://sekor.eu.org/techlog/creating-wildcard-ssl-certificates-with-lets-encrypt/</link><pubDate>Fri, 16 Mar 2018 17:59:48 +0200</pubDate><guid>https://sekor.eu.org/techlog/creating-wildcard-ssl-certificates-with-lets-encrypt/</guid><description>Install certbot: wget https://dl.eff.org/certbot-auto chmod a+x ./certbot-auto ./certbot-auto Get a certificate ./certbot-auto certonly \ --server https://acme-v02.api.letsencrypt.org/directory \ --manual --preferred-challenges dns -d *.itunix.eu An important parameter to notice is --server https://acme-v02.api.letsencrypt.org/directory, which will instruct the certbot client to use v2 of the Let&amp;rsquo;s Encrypt API (we need that for wildcard certs).
Add DNS TXT record _acme-challenge.itunix.eu. IN TXT &amp;quot;XXXX&amp;quot; After add you should verify that it is working using nslookup</description></item><item><title>Reinstall all packages with --force on Arch</title><link>https://sekor.eu.org/techlog/reinstall-all-packages-with-force-on-arch/</link><pubDate>Sun, 11 Mar 2018 22:08:46 +0200</pubDate><guid>https://sekor.eu.org/techlog/reinstall-all-packages-with-force-on-arch/</guid><description>Here is simple solution
pacman -Qqen &amp;gt; pkglist.txt pacman --force -S $(&amp;lt; pkglist.txt) mkinitcpio -p linux</description></item><item><title>Create an encrypted file container with dm-crypt</title><link>https://sekor.eu.org/techlog/create-an-encrypted-file-container-with-dm-crypt/</link><pubDate>Sun, 11 Mar 2018 14:32:13 +0200</pubDate><guid>https://sekor.eu.org/techlog/create-an-encrypted-file-container-with-dm-crypt/</guid><description>Create an empty file with the size of your container
dd if=/dev/zero bs=1M count=100 of=~/my-container.img Here I’ll use a 100MB container
Initialise the LUKS partition on the file and set the initial passphrase.
cryptsetup luksFormat ~/mycontainer Open the container. Opening the container creates a kernel device file which can then be mounted.
cryptsetup luksOpen ~/mycontainer secret-device This command will prompt for the container’s passphrase and then create a device file with the name /dev/mapper/secret-device.</description></item></channel></rss>