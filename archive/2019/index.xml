<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>2019 on Sebastian Korotkiewicz - Tech{{log}}</title><link>http://localhost:1313/archive/2019/</link><description>Recent content in 2019 on Sebastian Korotkiewicz - Tech{{log}}</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 28 Oct 2019 03:42:44 +0200</lastBuildDate><atom:link href="http://localhost:1313/archive/2019/index.xml" rel="self" type="application/rss+xml"/><item><title>Isso comments system on Debian</title><link>http://localhost:1313/techlog/isso-comments-system-on-debian/</link><pubDate>Mon, 28 Oct 2019 03:42:44 +0200</pubDate><guid>http://localhost:1313/techlog/isso-comments-system-on-debian/</guid><description>Add isso user
useradd isso and then mkdir /home/isso/ then su - isso
Install isso with pip
pip install isso Config files cat /etc/systemd/system/isso.service
[Unit] Description=isso server [Service] User=isso Environment=&amp;quot;ISSO_SETTINGS=/home/isso/config/isso.conf&amp;quot; ExecStart=/home/isso/.local/bin/isso -c $ISSO_SETTINGS run [Install] WantedBy=multi-user.target cat /home/isso/config/isso.conf
[general] dbpath = /home/isso/database/comments.db host = https://sebastian.korotkiewicz.eu/ [server] listen = http://127.0.0.1:8000/ [guard] enabled = true ratelimit = 2 direct-reply = 3 reply-to-self = true require-author = true require-email = false [markup] options = strikethrough, superscript, autolink, highlight, quote, underline, math, math-explicit allowed-elements = allowed-attributes = cat /etc/nginx/sites-enabled/comments.</description></item><item><title>Install Searx on Apache2 and uWSGI</title><link>http://localhost:1313/techlog/install-searx-on-apache2-and-uwsgi/</link><pubDate>Wed, 09 Oct 2019 04:03:39 +0200</pubDate><guid>http://localhost:1313/techlog/install-searx-on-apache2-and-uwsgi/</guid><description>uwsgi Install packages:
sudo apt-get install uwsgi uwsgi-plugin-python Add searx user:
useradd searx Create the configuration file /etc/uwsgi/apps-enabled/searx.ini with this content:
[uwsgi] # Who will run the code uid = searx gid = searx # Number of workers (usually CPU count) workers = 4 # The right granted on the created socket chmod-socket = 666 # Plugin to use and interpretor config single-interpreter = true master = true plugin = python3 lazy-apps = true enable-threads = true # Module to import module = searx.</description></item><item><title>Automated Let's Encrypt Wildcard Certificates with local BIND</title><link>http://localhost:1313/techlog/automated-lets-encrypt-wildcard-certificates-with-local-bind/</link><pubDate>Tue, 28 May 2019 15:36:10 +0200</pubDate><guid>http://localhost:1313/techlog/automated-lets-encrypt-wildcard-certificates-with-local-bind/</guid><description>Let&amp;rsquo;s Encrypt has recently started offering free wildcard certificates. Requirements:
The client must speak the ACME protocol v02 - the current Certbot &amp;gt;= 0.28 fulfills this, as well as Authentication takes place via DNS While other authentications (via web server, standalone, etc.) are quite easy to automate, it&amp;rsquo;s a bit more difficult with DNS: For authorization you have to set a random string - given by the client - into a DNS text record, which looks like this:</description></item><item><title>Stream Live with Nginx</title><link>http://localhost:1313/techlog/stream-live-with-nginx/</link><pubDate>Sun, 26 May 2019 22:39:51 +0200</pubDate><guid>http://localhost:1313/techlog/stream-live-with-nginx/</guid><description>Prepare working directory mkdir stream-live &amp;amp;&amp;amp; cd stream-live Download nginx Latest nginx can be downloaded from this page.
wget http://nginx.org/download/nginx-1.14.0.tar.gz tar -xf nginx-1.14.0.tar.gz Download modules git clone https://github.com/sergey-dryabzhinsky/nginx-rtmp-module.git git clone https://github.com/kaltura/nginx-vod-module Compile nginx cd nginx-1.14.0 ./configure --with-http_ssl_module --with-http_stub_status_module --add-module=/path/to/nginx-rtmp-module/ --add-module=/path/to/nginx-vod-module --prefix=/usr/local/nginx-streaming/ make -j 1 make install Configure nginx for stream video with hls via http and rtmp cd /usr/local/nginx-streaming/conf ; nano nginx.conf
worker_processes auto; events { worker_connections 1024; } # RTMP configuration rtmp { server { listen 1935; # Listen on standard RTMP port chunk_size 4000; application show { live on; record off; hls on; hls_path /mnt/hls/; hls_fragment 5; on_publish http://pass.</description></item><item><title>Stream VoD with Nginx</title><link>http://localhost:1313/techlog/stream-vod-with-nginx/</link><pubDate>Sat, 09 Feb 2019 19:57:34 +0200</pubDate><guid>http://localhost:1313/techlog/stream-vod-with-nginx/</guid><description>Prepare working directory mkdir stream &amp;amp;&amp;amp; cd stream
Download nginx Latest nginx can be downloaded from this page.
wget http://nginx.org/download/nginx-1.14.0.tar.gz
tar -xf nginx-1.14.0.tar.gz
Download modules git clone https://github.com/sergey-dryabzhinsky/nginx-rtmp-module.git
git clone https://github.com/kaltura/nginx-vod-module
Compile nginx cd nginx-1.14.0
./configure --with-http_ssl_module --add-module=/path/to/nginx-rtmp-module/ --add-module=/path/to/nginx-vod-module --prefix=/usr/local/nginx-streaming/
make -j 1
make install
Configure nginx for stream video files with hls via http cd /usr/local/nginx-streaming/conf ; nano nginx.conf
worker_processes auto; events { use epoll; } #enable stream vod on rtmp if you want this #rtmp { # server { # listen 1935; # # chunk_size 4000; # # # video on demand for mp4 files # application vod2 { # play /var/mp4s; # } # } #} http { log_format main &amp;#39;$remote_addr $remote_user [$time_local] &amp;#34;$request&amp;#34; &amp;#39; &amp;#39;$status &amp;#34;$http_referer&amp;#34; &amp;#34;$http_user_agent&amp;#34;&amp;#39;; default_type application/octet-stream; include /usr/local/nginx-streaming/conf/mime.</description></item></channel></rss>