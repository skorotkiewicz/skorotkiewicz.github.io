<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>git on Sebastian Korotkiewicz - Tech{{log}}</title><link>http://localhost:1313/tags/git/</link><description>Recent content in git on Sebastian Korotkiewicz - Tech{{log}}</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 12 Dec 2018 06:11:23 +0200</lastBuildDate><atom:link href="http://localhost:1313/tags/git/index.xml" rel="self" type="application/rss+xml"/><item><title>Compare `git add .` vs `git add -A`</title><link>http://localhost:1313/techlog/compare-git-add-.-vs-git-add-a/</link><pubDate>Wed, 12 Dec 2018 06:11:23 +0200</pubDate><guid>http://localhost:1313/techlog/compare-git-add-.-vs-git-add-a/</guid><description>Both of these will stage all files, including new files (which git commit -a misses) and deleted files.
The difference is that git add -A also stages files in higher directories that still belong to the same git repository. Here&amp;rsquo;s an example:
/my-repo
.git/
subfolder/
nestedfile.txt
rootfile.txt
If your current working directory is /my-repo, and that&amp;rsquo;s the root of this git repo (thus the .git/ folder), these two commands will do the same thing.</description></item><item><title>Convert Mercurial project to Git</title><link>http://localhost:1313/techlog/convert-mercurial-project-to-git/</link><pubDate>Mon, 28 Aug 2017 04:35:53 +0200</pubDate><guid>http://localhost:1313/techlog/convert-mercurial-project-to-git/</guid><description>I&amp;rsquo;m using fast-export:
cd ~
git clone https://github.com/frej/fast-export.git
git init git_repo
cd git_repo
~/fast-export/hg-fast-export.sh -r /path/to/old/mercurial_repo
git checkout HEAD
source: https://stackoverflow.com/questions/16037787/convert-mercurial-project-to-git</description></item><item><title>Deploy Jekyll Blog with Git</title><link>http://localhost:1313/techlog/deploy-jekyll-blog-with-git/</link><pubDate>Mon, 26 Jun 2017 00:53:58 +0200</pubDate><guid>http://localhost:1313/techlog/deploy-jekyll-blog-with-git/</guid><description>Local Installation Install jekyll gem install jekyll
Creating a Blog Navigate to wherever you want to store your blog files on your local machine, and create a new blog like so:
jekyll new awesomeblog
This will create an awesomeblog directory containing the configuration files, posts directory and other required bits. Now you can change to that directory and fire up a server process to preview it in your browser.
cd awesomeblog
jekyll serve
Jekyll will build your blog, and after a few seconds you should be able to visit http://localhost:4000 in your browser.</description></item></channel></rss>